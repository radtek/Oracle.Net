#pragma checksum "C:\Users\DELL\Desktop\Oracle数据库学习平台\Oracle.Net\Oracle.Net\Views\Home\Scene2.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "590e7e009e3a6c61d610fce65708a18f835ae8f7"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Home_Scene2), @"mvc.1.0.view", @"/Views/Home/Scene2.cshtml")]
[assembly:global::Microsoft.AspNetCore.Mvc.Razor.Compilation.RazorViewAttribute(@"/Views/Home/Scene2.cshtml", typeof(AspNetCore.Views_Home_Scene2))]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#line 1 "C:\Users\DELL\Desktop\Oracle数据库学习平台\Oracle.Net\Oracle.Net\Views\_ViewImports.cshtml"
using Oracle.Net;

#line default
#line hidden
#line 2 "C:\Users\DELL\Desktop\Oracle数据库学习平台\Oracle.Net\Oracle.Net\Views\_ViewImports.cshtml"
using Oracle.Net.Models;

#line default
#line hidden
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"590e7e009e3a6c61d610fce65708a18f835ae8f7", @"/Views/Home/Scene2.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"dc752d9315d7ca55328b89a9ad65e59d586dbd3d", @"/Views/_ViewImports.cshtml")]
    public class Views_Home_Scene2 : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    {
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_0 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("href", new global::Microsoft.AspNetCore.Html.HtmlString("~/home/teaching"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_1 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("style", new global::Microsoft.AspNetCore.Html.HtmlString("float:right;"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_2 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("href", new global::Microsoft.AspNetCore.Html.HtmlString("~/home/testonline/2"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        #line hidden
        #pragma warning disable 0169
        private string __tagHelperStringValueBuffer;
        #pragma warning restore 0169
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperExecutionContext __tagHelperExecutionContext;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner __tagHelperRunner = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner();
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __backed__tagHelperScopeManager = null;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __tagHelperScopeManager
        {
            get
            {
                if (__backed__tagHelperScopeManager == null)
                {
                    __backed__tagHelperScopeManager = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager(StartTagHelperWritingScope, EndTagHelperWritingScope);
                }
                return __backed__tagHelperScopeManager;
            }
        }
        private global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper;
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
            BeginContext(0, 2, true);
            WriteLiteral("\r\n");
            EndContext();
#line 2 "C:\Users\DELL\Desktop\Oracle数据库学习平台\Oracle.Net\Oracle.Net\Views\Home\Scene2.cshtml"
  
    ViewData["Title"] = "Scene2";

#line default
#line hidden
            BeginContext(44, 66, true);
            WriteLiteral("\r\n<div class=\"container\">\r\n    <div class=\"news-detail\">\r\n        ");
            EndContext();
            BeginContext(110, 53, false);
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("a", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "0862294a09f24d759cf43f785f59dc3e", async() => {
                BeginContext(157, 2, true);
                WriteLiteral("返回");
                EndContext();
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_0);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_1);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            EndContext();
            BeginContext(163, 10, true);
            WriteLiteral("\r\n        ");
            EndContext();
            BeginContext(173, 77, false);
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("a", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "3ec4056ed75a4e718454c06d004ecb98", async() => {
                BeginContext(224, 22, true);
                WriteLiteral("前往测试&nbsp;&nbsp;&nbsp;");
                EndContext();
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_2);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_1);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            EndContext();
            BeginContext(250, 7024, true);
            WriteLiteral(@"
        <h1><strong>Oracle 11g数据库的启动与关闭</strong></h1>
        <p>概述</p>
        <p>只有具备sysdba和sysoper<a class=""keylink"" href=""http://www.2cto.com/os/"" target=""_blank"">系统</a>特权的用户才能启动和关闭<a class=""keylink"" href=""http://www.2cto.com/database/"" target=""_blank"">数据库</a>。</p>
        <p>在启动数据库之前应该启动监听程序，否则就不能利用命令方式来管理数据库，包括启动和关闭数据库。</p>
        <p>虽然数据库正常运行，但如果没有启动监听程序，客户端就不能连接到数据库。</p>
        <p>在oracle用户下： 启动监听程序 lsnrctl start 关闭监听程序lsnrctl stop</p>
        <p>查询监听程序状态lsnrctl status</p>
        <p>startup</p>
        <p>支持参数</p>
        <p>STARTUP options | upgrade_options</p>
        <p>options为：[FORCE] [RESTRICT] [PFILE=filename] [QUIET] [ MOUNT [dbname]</p>
        <p>| [ OPEN [open_options] [dbname] ] | NOMOUNT ]，</p>
        <p>NOMOUNT、MOUNT、OPEN为startup的三个阶段，不能在命令中同时存在。其中，open_options为：READ {ONLY</p>
        <p>| WRITE [RECOVER]} | RECOVER。</p>
        <p>upgrade_options为：[PFILE=filename] {UPGRADE | DOWNGRADE} [QUIET]</p>
        <p>&nbsp;</p>
        <p><a class=""replace_word"" title=""Orac");
            WriteLiteral(@"le知识库"" href=""http://lib.csdn.net/base/oracle"" target=""_blank"">Oracle</a><a class=""replace_word"" title=""MySQL知识库"" href=""http://lib.csdn.net/base/mysql"" target=""_blank"">数据库</a>的完整启动过程包含以下3个步骤：</p>
        <p>简单地说，就是：<strong>启动实例</strong>--&gt;<strong>加载数据库</strong>--&gt;<strong>打开数据库</strong>.</p>
        <p>-----------------------------------------------------------------------------------------</p>
        <p><strong>1.创建并启动与数据库对应的实例。</strong></p>
        <p>在启动实例时，将为实例创建一系列后台进程和服务进程，并且在内存中创建SGA区等内存结构。在实例启动的过程中只会使用到初始化参数文件，数据库是否存在对实例的启动没有影响。如果初化参数设置有误，实例将无法启动。</p>
        <p><strong>2.为实例加载数据库。</strong></p>
        <p>加载数据库时实例将打开数据库的控制文件，从控制文件中获取数据库名称、数据文件的位置和名称等有关数据库物理结构的信息，为打开数据库做好准备。如果控制文件损坏，则实例将无法加载数据库。在加载数据库阶段，实例并不会打开数据库的物理文件----数据文件和重做日志文件。</p>
        <p><strong>3.将数据库设置为打开状态。</strong></p>
        <p>打开数据库时，实例将打开所有处于联机状态的数据文件和重做日志文件。控制文件中的任何一个数据文件或重做日志文件无法正常打开，数据库都将返回错误信息，这时需要进行数据库恢复。</p>
        <p>只有将数据库设置为打开状态后，数据库才处于正常状态，这时普通用户才能够访问数据库。在很多情况下，启动数据库时并不是直接完成上述3个步骤，而是逐步完成的，然后执行必要的管理操作，最后才使数据库");
            WriteLiteral(@"进入正常运行状态。所以，才有了各种不同的启动模式用于不同的数据库维护操作。</p>
        <p>因为Oracle数据库启动过程中不同的阶段可以对数据库进行不同的维护操作，对应我们不同的需求，所以就需不同的模式启动数据库。</p>
        <p>小白：在启动实例之前，需要先启动SQL*Plus，并以一个用户身份连接到Oracle。</p>
        <p>&nbsp;</p>
        <p><strong>启动模式详解</strong></p>
        <p><strong>1.NoMount 模式（启动实例不加载数据库）</strong></p>
        <p>命令：startup nomount</p>
        <p>讲解：这种启动模式只会创建实例，并不加载数据库，Oracle仅为实例创建各种内存结构和服务进程，不会打开任何数据文件。在NoMount模式下，只能访问那些与SGA区相关的数据字典视图，包括V$PARAMETER、V$SGA、V$PROCESS 和 V$SESSION等，这些视图中的信息都是从SGA区中获取的，与数据库无关。非安装启动，这种方式启动下可执行:重建控制文件、重建数据库、读取init.ora文件，启动instance，即启动SGA和后台进程，这种启动只需要init.ora文件。</p>
        <p>模式用途：</p>
        <p>(1)创建新数据库；</p>
        <p>(2)重建控制文件。</p>
        <p>&nbsp;</p>
        <p><strong>2.Mount模式（加载数据库但不打开数据库）</strong></p>
        <p>命令：startup mount</p>
        <p>讲解：这种启动模式将为实例加载数据库，但保持数据库为关闭状态。因为加载数据库时需要打开数据库控制文件，但数据文件和重做日志文件都都无法进行读写，所以用户还无法对数据库进行操作。 在Mount模式下，只能访问那些与控制文件相关的数据字典视图，包括V$THREAD、V$CONTROLFILE、V$DATABASE、V$DATAFILE 和 V$LOGFILE等，这些视图都是从控制文件中获取的。</p>
        <p>模式用途：</p>");
            WriteLiteral(@"
        <p>(1)重命名数据文件；</p>
        <p>(2)添加、删除或重命名重做日志文件；</p>
        <p>(3)执行数据库完全恢复操作；</p>
        <p>(4)改变数据库的归档模式。</p>
        <p><strong>&nbsp;</strong></p>
        <p><strong>3.Open模式（正常打开数据库）</strong></p>
        <p>命令：startup [open]</p>
        <p>讲解：正常按3个步骤启动数据库。</p>
        <p>模式用途：平时不对数据库做什么维护，像只做应用开发，用这个模式就好了。</p>
        <p><strong>&nbsp;</strong></p>
        <p><strong>4.强制启动模式</strong></p>
        <p>命令：startup force</p>
        <p>用途&amp;讲解：在某些情况下，使用前面的各种模式都无法成功启动数据库时，可以尝试强制启动模式。</p>
        <p><strong>&nbsp;</strong></p>
        <p><strong>使用Alter Database语句，还可以在各启动模式间切换。</strong>并且，还可以对数据库设置不同的状态用于不同的操作，如受/非受限抽状态、只读。</p>
        <p>&nbsp;</p>
        <p><strong>使用Alter Database语句，在各启动模式间切换。</strong></p>
        <p><strong>(1)</strong>从NoMount模式切换到Mount模式(没有从mount切换到nomount的)：</p>
        <p>命令：ALTER DATABASE MOUNT;</p>
        <p>&nbsp;</p>
        <p><strong>(2)</strong>当<a class=""replace_word"" title=""MySQL知识库"" href=""http://lib.csdn.net/base/mysql"" target=""_blank"">数据库</");
            WriteLiteral(@"a>状态为关闭时，切换到Open模式</p>
        <p>命令：ALTER DATABASE OPEN;</p>
        <p>&nbsp;</p>
        <p><strong>(3)</strong>在Open模式下，还可以选择将数据库设置为非受限状态和受限状态。</p>
        <p>命令：</p>
        <p>在启动Open模式时，添加restrict关键字：startup restrict</p>
        <p>设置或取消受限状态：alter system enable\disable restricted session;</p>
        <p>讲解：</p>
        <p>非受限状态，就是我们平时应用程序开发用到的状态。</p>
        <p><strong>受限状态</strong>，当打开的数据库被设置为受限状态时，只有Create Session 和 Restricted Session系统权限 或者 具有SYSDBA&nbsp; 和 SYSPORE 系统权限的用户才能连接到数据库。但进入受限状态后，系统中仍然可能会存在活动的普通用户会话。</p>
        <p>受限状态用途：</p>
        <p>(1)执行数据导入或导出操作；</p>
        <p>(2)暂时拒绝普通用户访问数据库；</p>
        <p>(3)进行数据库移植或升级操作。</p>
        <p>&nbsp;</p>
        <p><strong>(4) 只读状态</strong></p>
        <p>设置只读命令：alter database open read only;</p>
        <p>取消只读命令：alter database open read write;</p>
        <p>用途&amp;讲解：当一个正常打开的数据库被设置为只读状态时，用户只能查询数据，但不能以任何方式对数据库对象进行修改。处于只读状态，可能保证数据文件和重做日志文件中的内容不被修改，但是并不限制那些不会写入数据文件与重做日志文件的操作。</p>
        <p>&nbsp;</p>
        <p><strong>关闭数据库与实例</s");
            WriteLiteral(@"trong></p>
        <p>&nbsp;</p>
        <p>与数据库启动一下，关闭数据库与实例也分为3步：<strong>关闭数据库</strong>--&gt;<strong>实例卸载数据库</strong>---&gt;<strong>终止实例</strong>。</p>
        <p>(1)关闭数据库，oracle将重做日志高速缓存中的内容写入重做日志文件，并且将数据库高速缓存中被改动过的数据写入数据文件，然后再关闭所有的数据文件和重做日志文件，这时数据库的控制文件仍然处于打开状态，但是由于数据库处于关闭状态，所以用户无法访问数据库。</p>
        <p>（2）卸载数据库，关闭数据库后，例程才能被卸载，控制文件再这个时候被关闭，但例程仍然存在 。</p>
        <p>（3）终止例程，进程终止，分配给例程的内存sga区被回收。</p>
        <p><strong>1.Nomal（正常关闭方式）</strong></p>
        <p>命令：shutdown nomal</p>
        <p>讲解：正常方式关闭数据时，Oracle执行如下操作：</p>
        <p>(1)阻止任何用户建立新的连接。</p>
        <p>(2)等待当前所有正在连接的用户主动断开连接（此方式下Oracle不会立即断掉当前用户的连接，这些用户仍然操作相关的操作）</p>
        <p>(3)一旦所有的用户都断开连接，则立即关闭、卸载数据库，并终止实例。（所以，一般以正常方式关闭数据库时，应该通知所有在线的用户尽快断开连接）</p>
        <p>&nbsp;</p>
        <p><strong>2.Immediate（立即关闭方式）</strong></p>
        <p>命令：shutdown immediate</p>
        <p>讲解：</p>
        <p>(1)阻止任何用户建立新的连接，同时阻止当前连接的用户开始任何新的事务。</p>
        <p>(2)Oracle不等待在线用户主动断开连接，强制终止用户的当前事务，将任何未提交的事务回退。（如果存在太多未提交的事务，此方式将会耗费很长时间终止和回退事务）</p>
       ");
            WriteLiteral(@" <p>(3)直接关闭、卸载数据库，并终止实例。</p>
        <p>&nbsp;</p>
        <p><strong>3.Transactional（事务关闭方式）</strong></p>
        <p>命令：shutdown transactional</p>
        <p>讲解：这种方式介于正常关闭方式跟立即关闭方式之间，响应时间会比较快，处理也将比较得当。执行过程如下：</p>
        <p>&nbsp;</p>
        <p>(1)阻止任何用户建立新的连接，同时阻止当前连接的用户开始任何新的事务。</p>
        <p>(2)等待所有未提交的活动事务提交完毕，然后立即断开用户的连接。</p>
        <p>(3)直接关闭、卸载数据库，并终止实例。</p>
        <p>&nbsp;</p>
        <p><strong>4.Abort（终止关闭方式）</strong></p>
        <p>命令：shutdown abort</p>
        <p>讲解：这是比较粗暴的一种关闭方式，当前面3种方式都无法关闭时，可以尝试使用终止方式来关闭数据库。但是以这种方式关闭数据库将会丢失一部份数据信息，当重新启动实例并打开数据库时，后台进程SMON会执行实例恢复操作。一般情况下，应当尽量避免使用这种方式来关闭数据库。执行过程如下：</p>
        <p>&nbsp;</p>
        <p>(1)阻止任何用户建立新的连接，同时阻止当前连接的用户开始任何新的事务。</p>
        <p>(2)立即终止当前正在执行的SQL语句。</p>
        <p>(3)任何未提交的事务均不被退名。</p>
        <p>(4)直接断开所有用户的连接，关闭、卸载数据库，并终止实例。</p>
        <p>&nbsp;</p>
    </div>
</div>

");
            EndContext();
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; }
    }
}
#pragma warning restore 1591
